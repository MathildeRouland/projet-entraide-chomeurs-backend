<?php

namespace App\Controller\Api\DataController;

use App\Entity\Vulnerability;
use App\Repository\MemberRepository;
use Doctrine\ORM\EntityManagerInterface;
use App\Repository\VulnerabilityRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Symfony\Component\Serializer\Normalizer\AbstractNormalizer;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

/**
 * @Route("/api/data", name="data_vulnerability_")
 */
class VulnerabilityController extends AbstractController
{
   /**
     * @Route("/vulnerabilities", name="browse", methods = {"GET"})
     */
    public function list(VulnerabilityRepository $vulnerabilityRepository): JsonResponse
    {
        $vulnerabilities = $vulnerabilityRepository->findAll();

        return $this->json([
            'vulnerabilities' => $vulnerabilities,
        ], Response::HTTP_OK, [], ["groups" => "vulnerability"]);
    }

    /**
     * @Route("/vulnerabilities", name="add", methods = {"POST"})
     */
    public function add(EntityManagerInterface $em, Request $request, SerializerInterface $serializer, ValidatorInterface $validator): JsonResponse
    {
        $json = $request->getContent();

        $vulnerability = $serializer->deserialize($json, Vulnerability::class, 'json');

        $errorList = $validator->validate($vulnerability);
        if (count($errorList) > 0) {
            return $this->json($errorList, Response::HTTP_BAD_REQUEST);
        }

        $em->persist($vulnerability);
        $em->flush();

        return $this->json($vulnerability, Response::HTTP_CREATED, [], ["groups" => "vulnerability"]);
    }

    /**
     * @Route("/vulnerabilities/{id<\d+>}", name="edit", methods = "PATCH")
     */
    public function edit($id, VulnerabilityRepository $vulnerabilityRepository, EntityManagerInterface $em, Request $request, SerializerInterface $serializer): JsonResponse
    {
        $vulnerability = $vulnerabilityRepository->find($id);

        if ($vulnerability === null)
        {
            $errorMessage = [
                'message' => "Vulnerabilité non trouvée",
            ];
            return new JsonResponse($errorMessage, Response::HTTP_NOT_FOUND);
        }

        $json = $request->getContent();

        $serializer->deserialize($json, Vulnerability::class, 'json', [AbstractNormalizer::OBJECT_TO_POPULATE => $vulnerability]);

        $em->flush();

        return $this->json($vulnerability, Response::HTTP_OK, [], ["groups" => "vulnerability"]);
    }

    /**
     * @Route("/vulnerabilities/{id<\d+>}", name="delete", methods = {"DELETE"})
     */
    public function delete($id, EntityManagerInterface $em, MemberRepository $memberRepository): JsonResponse
    {
        {
            $vulnerability = $em->find(Vulnerability::class, $id);
    
            $vulnerabilityMembers = $vulnerability->getMembers();
    
            foreach($vulnerabilityMembers as $vulnerabilityMember){
                $member = new \App\Entity\Member();
                $member = $vulnerabilityMember->removeVulnerability($vulnerability);
    
                $em->persist($member);
                $em->flush();
            }
    
            
            if ($vulnerability  === null)
            {
                $errorMessage = [
                    'message' => "Vulnerabilité non trouvé",
                ];
                return new JsonResponse($errorMessage, Response::HTTP_NOT_FOUND);
            }
    
    
            $em->remove($vulnerability);
            $em->flush();
    
            // on renvoit une réponse
            return $this->json("Vulnerabilité supprime", Response::HTTP_OK, [], []);
        }
    }
}
